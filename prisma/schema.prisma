// ----------------------------------------------------
// Generators & datasource
// ----------------------------------------------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ----------------------------------------------------
// Enums
// ----------------------------------------------------
enum GroupStatus {
  OPEN
  CLOSED
  CANCELED
  EXPIRED
}

// ----------------------------------------------------
// Core: User, Company, Category
// ----------------------------------------------------
model User {
  id               String                     @id @default(uuid())
  name             String
  email            String                     @unique
  createdAt        DateTime                   @default(now())

  // Participation
  requestGroupMemberships RequestGroupParticipant[]
  activeGroupMemberships  ActiveGroupParticipant[]

  // Ownership
  requestGroups    RequestGroup[]             @relation("RequestGroupOwners")
  activeGroups     ActiveGroup[]              @relation("ActiveGroupOwners")

  // Image (1-to-1)
  profilePicture   Image?                     @relation("UserProfilePicture", fields: [profilePictureId], references: [id], onDelete: SetNull)
  profilePictureId String?                    @unique
}

model Company {
  id            String        @id @default(uuid())
  title         String
  websiteUrl    String?       @unique
  description   String?
  phone         String?
  email         String?
  address       String?
  city          String?
  verified      Boolean       @default(false)
  createdAt     DateTime      @default(now())

  // Relations
  categories    Category[]    @relation("CompanyCategories")
  activeGroups  ActiveGroup[]

  // Image (1-to-1)
  logo          Image?        @relation("CompanyLogo", fields: [logoId], references: [id], onDelete: SetNull)
  logoId        String?       @unique
}

model Category {
  id             String         @id @default(uuid())
  name           String         @unique

  companies      Company[]      @relation("CompanyCategories")
  activeGroups   ActiveGroup[]  @relation("ActiveGroupCategory")
  requestGroups  RequestGroup[] @relation("RequestGroupCategory")
}

// ----------------------------------------------------
// Images (ordered & reusable)
// ----------------------------------------------------
model Image {
  id       String   @id @default(uuid())
  url      String

  // Relations
  profilePictureUser User?         @relation("UserProfilePicture")
  companyLogo        Company?      @relation("CompanyLogo")
  requestGroupImages RequestGroupImage[]
  activeGroupImages  ActiveGroupImage[]
}

// ----------------------------------------------------
// Pivot tables for attaching images
// ----------------------------------------------------
model RequestGroupImage {
  id             String       @id @default(uuid())
  requestGroupId String
  imageId        String
  order          Int?

  requestGroup   RequestGroup @relation(fields: [requestGroupId], references: [id], onDelete: Cascade)
  image          Image        @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@unique([requestGroupId, imageId])
}

model ActiveGroupImage {
  id            String      @id @default(uuid())
  activeGroupId String
  imageId       String
  order         Int?

  activeGroup   ActiveGroup @relation(fields: [activeGroupId], references: [id], onDelete: Cascade)
  image         Image       @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@unique([activeGroupId, imageId])
}

// ----------------------------------------------------
// RequestGroup (pre-deal crowd intent)
// ----------------------------------------------------
model RequestGroup {
  id               String        @id @default(uuid())
  title            String
  description      String?
  status           GroupStatus   @default(OPEN)
  categoryId       String?
  category         Category?     @relation("RequestGroupCategory", fields: [categoryId], references: [id], onDelete: SetNull)
  createdAt        DateTime      @default(now())
  createdById      String?
  createdBy        User?         @relation("RequestGroupOwners", fields: [createdById], references: [id], onDelete: SetNull)

  // Relations
  participants     RequestGroupParticipant[]
  images           RequestGroupImage[]
  activeGroups     ActiveGroup[]             @relation("RequestGroupToActiveGroup")
}

model RequestGroupParticipant {
  id               String       @id @default(uuid())
  userId           String
  requestGroupId   String
  joinedAt         DateTime     @default(now())

  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  requestGroup     RequestGroup @relation(fields: [requestGroupId], references: [id], onDelete: Cascade)

  @@unique([userId, requestGroupId])
}

// ----------------------------------------------------
// ActiveGroup (live deal)
// ----------------------------------------------------
model ActiveGroup {
  id                    String        @id @default(uuid())
  title                 String
  description           String?
  status                GroupStatus   @default(OPEN)
  categoryId            String?
  category              Category?     @relation("ActiveGroupCategory", fields: [categoryId], references: [id], onDelete: SetNull)
  basePrice             Float
  groupPrice            Float
  minParticipants       Int?
  maxParticipants       Int?
  deadline              DateTime
  createdAt             DateTime      @default(now())
  requestGroupId        String?
  requestGroup          RequestGroup? @relation("RequestGroupToActiveGroup", fields: [requestGroupId], references: [id], onDelete: SetNull)
  companyId             String?
  company               Company?      @relation(fields: [companyId], references: [id], onDelete: SetNull)
  createdById           String?
  createdBy             User?         @relation("ActiveGroupOwners", fields: [createdById], references: [id], onDelete: SetNull)

  // Relations
  participants          ActiveGroupParticipant[]
  images                ActiveGroupImage[]
}

model ActiveGroupParticipant {
  id              String          @id @default(uuid())
  userId          String
  activeGroupId   String
  joinedAt        DateTime        @default(now())
  lastPing        DateTime       

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeGroup     ActiveGroup     @relation(fields: [activeGroupId], references: [id], onDelete: Cascade)

  @@unique([userId, activeGroupId])
}
